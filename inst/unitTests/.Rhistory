q()
q()
source("test_TrenaProjectTemplate.R")
q()
source("test_TrenaProjectTemplate.R")
q()
source("test_TrenaProjectTemplate.R")
TrenaProjectTemplate <- function(quiet=TRUE)

{
   genomeName <- "mm10"

   directory <- system.file(package="TrenaProjectTemplate", "extdata", "geneSets")
   geneSet.files <- list.files(directory)
   geneSets <- list()
   for(file in geneSet.files){
      full.path <- file.path(directory, file)
      genes <- scan(full.path, sep="\t", what=character(0))
      geneSet.name <- sub(".txt", "", file)
      geneSets[[geneSet.name]] <- genes
      }

   footprintDatabaseNames <- NA_character_;
   expressionDirectory <- system.file(package="TrenaProjectTemplate", "extdata", "expression")
   variantsDirectory <- system.file(package="TrenaProjectTemplate", "extdata", "variants")
   footprintDatabaseHost <- NA_character_;

   covariatesFile <- NA_character_;

   stopifnot(file.exists(expressionDirectory))
   #stopifnot(file.exists(variantsDirectory))
   # stopifnot(file.exists(covariatesFile))

   .TrenaProjectTemplate(TrenaProject(supportedGenes=geneSets[[1]],
                                      genomeName=genomeName,
                                      footprintDatabaseHost=footprintDatabaseHost,
                                      footprintDatabaseNames=footprintDatabaseNames,
                                      expressionDirectory=expressionDirectory,
                                      variantsDirectory=variantsDirectory,
                                      covariatesFile=covariatesFile,
                                      quiet=quiet
                                      ))

} # TrenaProjectTemplate, the constructor

q()
source("test_TrenaProjectTemplate.R")
args(scan)
getSupportedGenes(template.project)
source("test_TrenaProjectTemplate.R")
proj
source("test_TrenaProjectTemplate.R")
getSupportedGenes(template.project)
getVariantDatasetNames(tProj)
getFootprintDatabaseNames(tProj)
getFootprintDatabaseHost(tProj)
getExpressionMatrixNames(tProj)
dim(mtx)
q()
source("test_TrenaProjectTemplate.R")
q()
source("test_TrenaProjectTemplate.R")
dim(tbl.transcripts)
q()
source("test_TrenaProjectTemplate.R")
slotNames(tProj)
dim(tProj@geneInfoTable)
head(tProj@geneInfoTable)
"Abca1" %in% tProj@geneInfoTable$geneSymbol
grep("Abc", tProj@geneInfoTable$geneSymbol, ignore.case=TRUE)
grep("ENSMUSG00000015243", tProj@geneInfoTable$ensg, ignore.case=TRUE)
tProj@geneInfoTable[grep("ENSMUSG00000015243", tProj@geneInfoTable$ensg, ignore.case=TRUE),]
Q
q()
source("test_TrenaProjectTemplate.R")
geneSymbol
genomeName
head(tProj$geneInfoTable)
slotNames(tProj)
head(tProj$geneInfoTable)
head(tProj@geneInfoTable)
subset(tProj@geneInfoTable, geneSymbo == geneSymbol)
subset(tProj@geneInfoTable, geneSymbol == geneSymbol)
head(tProj@geneInfoTable)
subset(tProj@geneInfoTable, geneSymbol == "Abca1")
Q
q()
source("test_TrenaProjectTemplate.R")
traceback()
q()
source("test_TrenaProjectTemplate.R")
dim(tbl.transcripts)
(tbl.transcripts)
q()
source("test_TrenaProjectTemplate.R")
dim(tbl.transcripts)
q()
source("test_TrenaProjectTemplate.R")
tbl.transcripts$end
tbl.transcripts$tss
tbl.transcripts$strand
source("test_TrenaProjectTemplate.R"); runTests()
q()
q()
packageVersion("TrenaProject")
setTargetGene(tProj, "Abca1")
tbl.transcripts
getGeneRegion(tProj)
q()
source("test_TrenaProjectTemplate.R"); 
getGeneRegion(tProj)
getEhancers(tProj)
getEnhancers(tProj)
q()
source("test_TrenaProjectTemplate.R"); 
q()
source("test_TrenaProjectTemplate.R"); 
q()
source("test_TrenaProjectTemplate.R"); 
region
q()
source("test_TrenaProjectTemplate.R")
region$chromLocString
getTargetGene(tProj)
region
source("test_TrenaProjectTemplate.R"); runTests()
source("test_TrenaProjectTemplate.R"); runTests()
q()
